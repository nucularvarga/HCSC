	
	CONSTANT IO_Port,  00
    CONSTANT LED0,     01
    CONSTANT LED1,     02
    CONSTANT BNT0,     04
    CONSTANT COM_Port, 01
    CONSTANT TXD,      01
    CONSTANT RXD,      01
	
	CONSTANT zahlo,     30
	CONSTANT zahlu,     3A
	CONSTANT buch1o,    41
	CONSTANT buch1u,    5B
	CONSTANT buch2o,    61
	CONSTANT buch2u,    7B
	
	CONSTANT NZAHLCHARS,10
	

	


; Register Mapping

; alle acht Register s0 bis s7 stehen der ISR zur Verfuegung

    NAMEREG s0, IOR
    NAMEREG s1, TMP
    NAMEREG s2, CNTH
    NAMEREG s3, CNTL
	NAMEREG s4, STATE ; STATE = 0 warte auf startbit, 1-8 nehme datenbit an, 9 endbit, 10 werte ascii zeichen aus, 11 sende ascii zeichen
	NAMEREG s5, SMPCNT ; count 8/16 times
	NAMEREG s6, DATABIT; which of the 8 bits gets received
	NAMEREG s7, ASCII  ; Datenwort
	NAMEREG s8, CNTVALIDCHAR ;
	NAMEREG s9, SENDDATA ; Daten zum senden
	NAMEREG sA, CNTINCCHAR ; Anzahl der eingehende zeichen
	NAMEREG sB, HIGH ;HIGH
	NAMEREG sC, LOW ;LOW
	NAMEREG sD, SENDCNT
	NAMEREG sF, SENDBIT


; alle acht Register s8 bis sF stehen der Main-Funktion zur Verfuegung



; --------------------------------------------------------------------------------------------

	ADDRESS 000

; Hauptfunktion

start:  
	AND 	CNTH, 00   ; Initialisierung der Zaehlers ...
    AND    	CNTL, 00   ; in der ISR
	AND    	STATE, 00  ; Setze STATE 0
	LOAD    SMPCNT, 08 ; mit sendcnt zusammen fuehren
	LOAD    DATABIT, 08
	LOAD	SENDBIT, 08
	LOAD    CNTVALIDCHAR, NZAHLCHARS
	LOAD    CNTINCCHAR, NZAHLCHARS ; 16 zaehler
	LOAD    HIGH, 00
	LOAD    ASCII, 00
	OUTPUT  HIGH, 03 
	LOAD	HIGH, 01
	LOAD	LOW, 00
	LOAD    SENDCNT, 10
	OUTPUT	HIGH, 01
	ENABLE INTERRUPT

loop:   
	; do nothing
	JUMP loop

; --------------------------------------------------------------------------------------------

 

; Subroutine, die den Zustand des Buttons BTN0 auf die Leuchtdiode LED0 durchschaltet

BNT0LED0:
        INPUT  IOR,  IO_Port ; IO-Port einlesen
        INPUT  TMP,  IO_Port ; IO-Port einlesen
        AND    TMP,  BNT0    ; Zustand von BNT0 ermitteln
        SR0    TMP           ; auf die Position ...
        SR0    TMP           ; ... von LED0 verschieben
        AND    IOR,  LED1    ; Zustand von LED1 ermitteln
        OR     IOR,  TMP     ; LED1 mit BNT0 konkatinieren
        OUTPUT IOR,  IO_Port ; den neuen Wert ueber IO-Port ausgeben 
        RETURN

; --------------------------------------------------------------------------------------------

; Subroutine, die die Leuchtdione LED1 mit ca. 1 Hz blinken laesst
BLINK:  ADD    CNTL, 01      ; den 16-Bit-Zaehler ... 
        ADDCY  CNTH, 00      ; .. inkrementieren
        JUMP   NC,   BLINK0  ; kein Ueberlauf -> exit, sonst
        INPUT  IOR,  IO_Port ; IO-Port einlesen
        XOR    IOR,  LED1    ; LED1 toggeln
        OUTPUT IOR,  IO_Port ; den neuen Wert ueber IO-Port ausgeben 
BLINK0: RETURN
; --------------------------------------------------------------------------------------------
; Subroutine, die Daten ueber das serielle Eingangssignal RXD abtastet,
; zu einem Byte zusammensetzt, entschidet, ob das empfangene Byte
; ein Buchstabe oder eine Ziffer ist, und ggf. das Byte seriell
; ueber das serielle Ausgangssignal TXD ausgibt
;
; in dieser Version ist eine einfache Echo-Funktion implementiert



COMM_RX:
    COMPARE STATE, 02
    JUMP    Z, RECV            ; Got to State 2
	COMPARE STATE, 05
    JUMP    Z, SEND            ; Got to State 1
	COMPARE STATE, 01
    JUMP    Z, RECV_START            ; Got to State 1
    COMPARE STATE, 03
    JUMP    Z, RECV_END             ; Go to State 3
    COMPARE STATE, 00     ;
    JUMP    Z,  RECV_IDLE           ; Go to State 0
	COMPARE STATE, 06    ;
    JUMP    Z,  SEND_START           ; Go to State 0
    COMPARE STATE, 04     ;
    JUMP    Z,  SEND_PREPARE           ; Go to State 0
	COMPARE STATE, 07
	JUMP    Z, SEND_HIGH
    RETURN  ;JUMP COMMRET          ; Do nothing, shouldnt reach this code	
	
RECV_IDLE:
	INPUT   IOR,  01
	COMPARE IOR, 00
	RETURN NZ  ;JUMP    NZ, COMMRET
	LOAD    STATE, 01
	RETURN  ;JUMP    COMMRET

RECV_START:   
	SUB     SMPCNT, 01
  	RETURN NZ ;JUMP    NZ, COMMRET   ; warte auf den Mittelpunkt des Startbits
    LOAD    SMPCNT, 10    ; alle 16 interrupts signal lesen
    LOAD    STATE, 02     ; stetze State auf RECV
 	RETURN  ;JUMP    COMMRET

RECV:
	SUB     SMPCNT, 01
  	RETURN NZ ;JUMP    NZ, COMMRET   ; warte auf den Mittelpunkt des Startbits
	LOAD    SMPCNT, 10
	INPUT  	IOR,  01
    OR      ASCII, IOR
	RR     	ASCII		;SL0
    SUB     DATABIT, 01
    RETURN NZ ;JUMP    NZ, COMMRET
	LOAD    DATABIT, 08
	LOAD    SMPCNT, 10
 	LOAD    STATE, 03
	RETURN ;JUMP    COMMRET

RECV_END:
	SUB     SMPCNT, 01
  	RETURN  NZ;JUMP    NZ, COMMRET   ; warte auf den Mittelpunkt des Startbits
	LOAD    SMPCNT, 08
    ;COMPARE IOR, 01   compare ob IOR 1 ist
	COMPARE ASCII, zahlo   
	JUMP  C, NONUMBER			;SENDATA kleiner als 0x30
	COMPARE ASCII, zahlu 
	JUMP  NC, NONUMBER     ;SENDATA groesser als 0x3A
	

VALID:
	OUTPUT  CNTVALIDCHAR, 02  ; Addresse setzen 
	OUTPUT  ASCII ,04  ;Zeichen abspeichern
	LOAD    ASCII, 00
	SUB     CNTINCCHAR, 01	;CNTINCCHAR verringern
	JUMP    Z, PREPARE_S
	SUB     CNTVALIDCHAR, 01 ;CNTVALIDCHAR erhoehen
	LOAD    STATE, 00   ; !!!!!!!!!! beide states zusammenfuhren  !!!!!!!!!!!
	RETURN
	
PREPARE_S:
	LOAD   STATE, 04
	LOAD    CNTINCCHAR, NZAHLCHARS
	LOAD    CNTVALIDCHAR, NZAHLCHARS
	RETURN
	
NONUMBER:
	SUB     CNTINCCHAR, 01	;CNTINCCHAR verringern
	LOAD    STATE, 00
	RETURN  NZ
	LOAD    STATE, 04
	LOAD    CNTINCCHAR, NZAHLCHARS
	LOAD    CNTVALIDCHAR, NZAHLCHARS
	RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
SEND_PREPARE:
	OUTPUT  LOW, 01
	LOAD	STATE, 06

SEND_START:
	SUB		SENDCNT, 01
	RETURN 	NZ          ;  Startbit noch nicht vollstaendig gesendet. springe raus
	LOAD 	SENDCNT, 10 ;  Counter wieder auf 16 setzen
	LOAD    STATE, 05 ; datawrite state setzen. TODO
	;FETCH   SENDATA, CNTVALIDCHAR
	OUTPUT  CNTVALIDCHAR, 02 ;
	INPUT   ASCII, 04
	OUTPUT  ASCII, 01 ; TXD ausgeben 
	RETURN  ;NÃ¤chster interrupt geht in SEND STATE

SEND:
	SUB		SENDCNT, 01
	RETURN 	NZ			; 1 bit gesendet
	SR0     ASCII
	OUTPUT  ASCII, 01 ; TXD ausgeben
	LOAD    SENDCNT, 10
	SUB     SENDBIT, 01
	RETURN 	NZ			  ; 
	LOAD    SENDBIT, 08
	LOAD    STATE, 07
	OUTPUT  HIGH, 01
	;JUMP 	COMMRET oder send high	

SEND_HIGH:
	SUB		SENDCNT, 01
	RETURN NZ
	SUB     CNTVALIDCHAR, 01
	JUMP    Z, COMMRET
	LOAD    SENDCNT, 10
	LOAD    STATE, 04
	RETURN
	
COMMRET:
	LOAD SENDCNT, 10
	LOAD CNTVALIDCHAR, NZAHLCHARS
	LOAD STATE, 00
	RETURN


; --------------------------------------------------------------------------------------------

        

    ADDRESS 300

; Interrupt-Service-Routine

ISR:
	CALL    COMM_RX
	
	
	;CALL 	COMM_RX
	CALL    BNT0LED0
    CALL    BLINK
    RETURNI ENABLE


; --------------------------------------------------------------------------------------------
; Interrupt-Vektor

    ADDRESS 3FF
    JUMP ISR